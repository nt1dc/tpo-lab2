plugins {
    id "application"
    id 'jacoco'
}
//apply plugin : "java"
//ext {
//    javaMainClass = "task3.Story"
//}
//
//application {
//    mainClassName = javaMainClass
//}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    options.encoding = 'UTF-8'
}

test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
    finalizedBy jacocoTestReport // report is always generated after tests run
    finalizedBy jacocoTestCoverageVerification
    useJUnitPlatform()
}

repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.26'
    testCompileOnly ('org.projectlombok:lombok:1.18.24'){
        exclude module: "logback-classic"
    }
    testAnnotationProcessor ('org.projectlombok:lombok:1.18.24')

    compileOnly ('org.projectlombok:lombok:1.18.24'){
        exclude module: "logback-classic"
    }
    annotationProcessor ('org.projectlombok:lombok:1.18.24'){
        exclude module: "logback-classic"
    }
    implementation 'org.apache.commons:commons-csv:1.10.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
    testImplementation 'org.mockito:mockito-core:2.1.0'

}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude : [

            ])
        }))
    }
}

jacocoTestCoverageVerification {
    dependsOn test
    violationRules {
        rule {
            element = 'BUNDLE'
            limit {
                excludes = ["task2"]
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.7
            }
        }
    }
}
